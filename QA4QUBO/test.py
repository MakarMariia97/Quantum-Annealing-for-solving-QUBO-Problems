import numpy as np
from dwave.system.samplers.dwave_sampler import DWaveSampler
import neal
from QA4QUBO.matrix import generate_QUBO_problem, generate_pegasus
from QA4QUBO.solver import g, random_shuffle, make_decision, fill, inverse, csv_write, function_f, map_back
from QA4QUBO.vector import generate_S
from QA4QUBO.script import annealer
import time
from datetime import timedelta
from tqdm import tqdm

def update(vector):
    dim = len(vector)
    i = 0
    while(i < dim and vector[i] == 1):
        vector[i] = 0
        i += 1
    if(i < dim):
        vector[i] = 1

def E(matrix, vector):
    n = len(matrix)
    e = 0
    for row in range(n):
        for col in range(n):
            val = matrix[row][col]
            if row == col:
                e += val * vector[row]
            else:
                e += val * vector[row] * vector[col]
    return e

def dict_mat(Q, n):
    m = np.zeros((n,n))
    g_k = list()
    keys = Q.keys()
    for a,b in keys:
        if a not in g_k:
            g_k.append(a)
        if b not in g_k:
            g_k.append(b)
    
    sorted(g_k)
    support = dict(zip(g_k,np.arange(n)))

    for key, val in Q.items():
        row, col = key
        m[support[row]][support[col]] = val
    
    return m

def bruteforce(QUBO, n):
    x = np.zeros(n)
    glob_min = 10000000
    glob_z = x
    som = 0
    for i in tqdm(range(1,2**n)):
        update(x)
        fQ = E(QUBO,x)
        if fQ < glob_min:
            glob_z = x
            glob_min = fQ
    return glob_z

def main():
    n = 10
    DIR = "test.csv"
    #csv_write(DIR=DIR, l=["n", "QUBO", "Theta"])
    #sampler = DWaveSampler({'topology__type':'pegasus'})
    #A = generate_pegasus(n)
    #p = 1
    #S = generate_S(n,1000)
    #Q, c = generate_QUBO_problem(S)
    #Theta, m = g(Q, A, np.arange(n), p, True)
    #Theta = {(30, 30): -2846980.0, (30, 31): 125652.0, (31, 31): -1193028.0, (31, 30): 125652.0, (31, 32): 8214.0, (32, 32): -205683.0, (32, 31): 8214.0, (32, 33): 23051.0, (33, 33): -3098179.0, (33, 32): 23051.0, (33, 34): 426755.0, (34, 34): -3364035.0, (34, 33): 426755.0, (34, 35): 554850.0, (35, 35): -3876660.0, (35, 34): 554850.0, (35, 36): 658530.0, (36, 36): -3888579.0, (36, 35): 658530.0, (36, 37): 547149.0, (37, 37): -3313179.0, (37, 36): 547149.0, (37, 38): 572050.0, (38, 38): -4034100.0, (38, 37): 572050.0, (38, 39): 269450.0, (39, 39): -1673443.0, (39, 38): 269450.0}
    #m = np.array([0,9,8,1,5,3,7,4,6,2])
    #n = 10
    #Theta = {(30, 30): -1905510368736.0, (30, 31): 155674260288.0, (31, 31): -9331893785952.0, (31, 30): 155674260288.0, (31, 32): 825301449288.0, (31, 46): 112822637832.0, (32, 32): -9425035025611.0, (32, 31): 825301449288.0, (32, 33): 869203202811.0, (32, 47): 593151848454.0, (33, 33): -9782565781611.0, (33, 32): 869203202811.0, (33, 34): 721388766417.0, (33, 48): 403135817604.0, (34, 34): -7939994764075.0, (34, 33): 721388766417.0, (34, 35): 329342558193.0, (34, 49): 597315699475.0, (35, 35): -4690799928747.0, (35, 34): 329342558193.0, (35, 36): 51444528624.0, (36, 36): -1316003900736.0, (36, 35): 51444528624.0, (36, 37): 3366566880.0, (37, 37): -318512150260.0, (37, 36): 3366566880.0, (37, 38): 20196871010.0, (38, 38): -7474479761835.0, (38, 37): 20196871010.0, (38, 39): 195932381821.0, (39, 39): -3021700150227.0, (39, 38): 195932381821.0, (39, 40): 263961122392.0, (40, 40): -9833591419872.0, (40, 39): 263961122392.0, (40, 41): 532318996800.0, (41, 41): -5937775394400.0, (41, 40): 532318996800.0, (41, 42): 248076880200.0, (42, 42): -4810689287611.0, (42, 41): 248076880200.0, (43, 43): -9781847471172.0, (44, 44): -9063206079235.0, (45, 45): -2137843716852.0, (45, 46): 24184378182.0, (46, 46): -1386912865467.0, (46, 31): 112822637832.0, (46, 45): 24184378182.0, (46, 47): 81086682006.0, (47, 47): -6871960093812.0, (47, 32): 593151848454.0, (47, 46): 81086682006.0, (47, 48): 275103398856.0, (48, 48): -4578815524192.0, (48, 33): 403135817604.0, (48, 47): 275103398856.0, (48, 49): 333799698700.0, (49, 49): -8228999664475.0, (49, 34): 597315699475.0, (49, 48): 333799698700.0}
    #m = np.array([17,5,6,13,8,0,12,10,14,2,15,19,7,11,16,3,4,9,1,18])
    #n = 20
    Theta = {(30, 30): -17431986.0, (30, 31): 242847.0, (31, 31): -31922004.0, (31, 30): 242847.0, (31, 32): 542559.0, (31, 46): 312423.0, (32, 32): -38582514.0, (32, 31): 542559.0, (32, 33): 151657.0, (32, 47): 676374.0, (33, 33): -9013026.0, (33, 32): 151657.0, (33, 34): 162877.0, (33, 48): 87329.0, (34, 34): -41384694.0, (34, 33): 162877.0, (34, 35): 700284.0, (34, 49): 782158.0, (35, 35): -38255124.0, (35, 34): 700284.0, (35, 36): 417276.0, (35, 50): 601392.0, (36, 36): -24842454.0, (36, 35): 417276.0, (36, 37): 452568.0, (36, 51): 354996.0, (37, 37): -41431336.0, (37, 36): 452568.0, (37, 38): 442976.0, (37, 52): 758640.0, (38, 38): -24321516.0, (38, 37): 442976.0, (38, 39): 116840.0, (38, 53): 112268.0, (39, 39): -11075650.0, (39, 38): 116840.0, (39, 40): 95220.0, (39, 54): 217120.0, (40, 40): -19859994.0, (40, 39): 95220.0, (40, 41): 137448.0, (40, 55): 10350.0, (41, 41): -15953596.0, (41, 40): 137448.0, (41, 42): 102920.0, (41, 56): 146412.0, (42, 42): -14903250.0, (42, 41): 102920.0, (42, 57): 10540.0, (43, 43): -32627484.0, (43, 58): 547200.0, (44, 44): -16192176.0, (44, 59): 255109.0, (45, 45): -45528000.0, (45, 46): 448320.0, (46, 46): -22377706.0, (46, 31): 312423.0, (46, 45): 448320.0, (46, 47): 389478.0, (47, 47): -39657534.0, (47, 32): 676374.0, (47, 46): 389478.0, (47, 48): 389478.0, (48, 48): -22377706.0, (48, 33): 87329.0, (48, 47): 389478.0, (48, 49): 419366.0, (49, 49): -42643326.0, (49, 34): 782158.0, (49, 48): 419366.0, (49, 50): 671704.0, (50, 50): -35632476.0, (50, 35): 601392.0, (50, 49): 671704.0, (50, 51): 511632.0, (51, 51): -32627484.0, (51, 36): 354996.0, (51, 50): 511632.0, (51, 52): 595080.0, (52, 52): -41338050.0, (52, 37): 758640.0, (52, 51): 595080.0, (52, 53): 192270.0, (53, 53): -10644244.0, (53, 38): 112268.0, (53, 52): 192270.0, (53, 54): 208624.0, (54, 54): -44784304.0, (54, 39): 217120.0, (54, 53): 208624.0, (54, 55): 23600.0, (55, 55): -1209000.0, (55, 40): 10350.0, (55, 54): 23600.0, (55, 56): 11025.0, (56, 56): -21143304.0, (56, 41): 146412.0, (56, 55): 11025.0, (56, 57): 14994.0, (57, 57): -1643934.0, (57, 42): 10540.0, (57, 56): 14994.0, (57, 58): 27200.0, (58, 58): -38068000.0, (58, 43): 547200.0, (58, 57): 27200.0, (58, 59): 605600.0, (59, 59): -36054396.0, (59, 44): 255109.0, (59, 58): 605600.0, (60, 60): -26309250.0, (60, 61): 66550.0, (60, 75): 227150.0, (61, 61): -5839944.0, (61, 60): 66550.0, (61, 62): 65098.0, (61, 76): 6413.0, (62, 62): -25741686.0, (62, 61): 65098.0, (62, 63): 364764.0, (63, 63): -32345346.0, (63, 62): 364764.0, (63, 64): 32544.0, (63, 78): 233232.0, (64, 64): -2320176.0, (64, 63): 32544.0, (64, 79): 42432.0, (65, 65): -29944266.0, (65, 66): 442035.0, (65, 80): 499719.0, (66, 66): -33614400.0, (66, 65): 442035.0, (66, 67): 567525.0, (66, 81): 121965.0, (67, 67): -38301900.0, (67, 66): 567525.0, (67, 68): 400890.0, (67, 82): 681030.0, (68, 68): -23847726.0, (68, 67): 400890.0, (68, 69): 267426.0, (68, 83): 174798.0, (69, 69): -25694376.0, (69, 68): 267426.0, (69, 70): 47793.0, (69, 84): 6981.0, (70, 70): -4298344.0, (70, 69): 47793.0, (70, 71): 32396.0, (70, 85): 23140.0, (71, 71): -17479644.0, (71, 70): 32396.0, (71, 72): 110292.0, (71, 86): 136136.0, (72, 72): -14568846.0, (72, 71): 110292.0, (72, 73): 124533.0, (72, 87): 122715.0, (73, 73): -19717314.0, (73, 72): 124533.0, (73, 88): 3699.0, (74, 74): -46921050.0, (75, 75): -19812436.0, (75, 60): 227150.0, (75, 76): 21889.0, (76, 76): -2561596.0, (76, 61): 6413.0, (76, 75): 21889.0, (78, 78): -16526104.0, (78, 63): 233232.0, (78, 79): 304096.0, (79, 79): -41990884.0, (79, 64): 42432.0, (79, 78): 304096.0, (79, 80): 704548.0, (80, 80): -37927636.0, (80, 65): 499719.0, (80, 79): 704548.0, (80, 81): 137881.0, (81, 81): -8340676.0, (81, 66): 121965.0, (81, 80): 137881.0, (81, 82): 146358.0, (82, 82): -40217994.0, (82, 67): 681030.0, (82, 81): 146358.0, (82, 83): 296946.0, (83, 83): -16859934.0, (83, 68): 174798.0, (83, 82): 296946.0, (83, 84): 4563.0, (84, 84): -628836.0, (84, 69): 6981.0, (84, 83): 4563.0, (84, 85): 3380.0, (85, 85): -12512500.0, (85, 70): 23140.0, (85, 84): 3380.0, (85, 86): 97240.0, (86, 86): -17956114.0, (86, 71): 136136.0, (86, 85): 97240.0, (86, 87): 151470.0, (87, 87): -19431900.0, (87, 72): 122715.0, (87, 86): 151470.0, (87, 88): 3645.0, (88, 88): -435384.0, (88, 73): 3699.0, (88, 87): 3645.0, (88, 89): 2961.0, (89, 89): -15810424.0, (89, 88): 2961.0, (90, 90): -21808150.0, (90, 91): 133315.0, (90, 105): 38675.0, (91, 91): -14090956.0, (91, 90): 133315.0, (91, 92): 7325.0, (91, 106): 159099.0, (92, 92): -1209000.0, (92, 91): 7325.0, (92, 93): 14925.0, (92, 107): 17575.0, (93, 93): -28529436.0, (93, 92): 14925.0, (93, 94): 466257.0, (93, 108): 481779.0, (94, 94): -37178724.0, (94, 93): 466257.0, (94, 95): 42955.0, (94, 109): 35145.0, (95, 95): -2658150.0, (95, 94): 42955.0, (95, 96): 38500.0, (95, 110): 51315.0, (96, 96): -33379500.0, (96, 95): 38500.0, (96, 111): 328300.0, (98, 98): -5599204.0, (98, 99): 22156.0, (98, 113): 102428.0, (99, 99): -9205054.0, (99, 98): 22156.0, (99, 100): 54435.0, (99, 114): 29032.0, (100, 100): -13708500.0, (100, 99): 54435.0, (100, 101): 241965.0, (100, 115): 56430.0, (101, 101): -40358064.0, (101, 100): 241965.0, (101, 102): 584961.0, (101, 116): 771741.0, (102, 102): -32862544.0, (102, 101): 584961.0, (102, 103): 26182.0, (102, 117): 454051.0, (103, 103): -1837186.0, (103, 102): 26182.0, (103, 104): 12502.0, (103, 118): 33934.0, (104, 104): -15810424.0, (104, 103): 12502.0, (104, 119): 221417.0, (105, 105): -4105500.0, (105, 90): 38675.0, (105, 106): 46155.0, (106, 106): -25978206.0, (106, 91): 159099.0, (106, 105): 46155.0, (106, 107): 381729.0, (107, 107): -33520446.0, (107, 92): 17575.0, (107, 106): 381729.0, (107, 108): 567321.0, (108, 108): -38395446.0, (108, 93): 481779.0, (108, 107): 567321.0, (108, 109): 36315.0, (109, 109): -2175300.0, (109, 94): 35145.0, (109, 108): 36315.0, (109, 110): 41985.0, (110, 110): -44272716.0, (110, 95): 51315.0, (110, 109): 41985.0, (110, 111): 437577.0, (111, 111): -22472604.0, (111, 96): 328300.0, (111, 110): 437577.0, (113, 113): -41944266.0, (113, 98): 102428.0, (113, 114): 134216.0, (114, 114): -7331416.0, (114, 99): 29032.0, (114, 113): 134216.0, (114, 115): 30096.0, (115, 115): -9541026.0, (115, 100): 56430.0, (115, 114): 30096.0, (115, 116): 179982.0, (116, 116): -43155684.0, (116, 101): 771741.0, (116, 115): 179982.0, (116, 117): 599031.0, (117, 117): -31451434.0, (117, 102): 454051.0, (117, 116): 599031.0, (117, 118): 588487.0, (118, 118): -42410356.0, (118, 103): 33934.0, (118, 117): 588487.0, (118, 119): 600989.0, (119, 119): -32110176.0, (119, 104): 221417.0, (119, 118): 600989.0, (120, 120): -42922824.0, (120, 121): 662632.0, (121, 121): -34928916.0, (121, 120): 662632.0, (121, 122): 142935.0, (122, 122): -9397050.0, (122, 121): 142935.0, (122, 123): 1950.0, (123, 123): -483750.0, (123, 122): 1950.0, (123, 124): 1140.0, (124, 124): -5502894.0, (124, 123): 1140.0, (124, 125): 50616.0, (125, 125): -21285804.0, (125, 124): 50616.0, (125, 126): 7992.0, (126, 126): -870606.0, (126, 125): 7992.0, (126, 127): 3024.0, (127, 127): -8100456.0, (127, 126): 3024.0, (127, 128): 97272.0, (128, 128): -27679674.0, (128, 127): 97272.0, (128, 129): 545997.0, (129, 129): -44737806.0, (129, 128): 545997.0, (129, 130): 340423.0, (130, 130): -17336664.0, (130, 129): 340423.0, (130, 131): 88806.0, (131, 131): -11842194.0, (131, 130): 88806.0, (131, 132): 181794.0, (132, 132): -35210394.0, (132, 131): 181794.0}
    m = np.array([35,54,42,19,71,74,51,22,43,14,47,39,28,91,13,60,99,72,93,25,36,41,85,49,70,95,64,77,58,94,66,38,15,68,83,32,96,56,98,75,76,81,31,0,29,90,8,65,21,62,57,7,23,3,44,67,86,20,69,16,73,10,5,63,80,53,37,27,2,1,48,82,4,6,92,46,59,12,17,88,97,50,84,18,30,87,45,61,34,79,40,89,11,24,26,78,9,52,33,55])
    n = 100

    csv_write(DIR=DIR, l=[n, "Q", Theta])
    sampler = neal.SimulatedAnnealingSampler()
    start = time.time()
    sim = map_back(annealer(Theta,sampler, 1000), m)
    convert = timedelta(seconds=int(time.time() - start))
    csv_write(DIR=DIR, l=["Simulated", sim])
    csv_write(DIR=DIR, l=["fQ", function_f(dict_mat(Theta, n), sim)])
    csv_write(DIR=DIR, l=["time", convert])
    
    start = time.time()
    sam = np.atleast_2d(annealer(Theta,DWaveSampler(), 1000)).T
    convert = timedelta(seconds=int(time.time() - start))
    csv_write(DIR=DIR, l=["DWaveSampler", sam])
    csv_write(DIR=DIR, l=["fQ", function_f(dict_mat(Theta, n), sam)])
    csv_write(DIR=DIR, l=["time", convert])
    """
    start = time.time()
    bf = bruteforce(dict_mat(Theta, n), n)
    convert = timedelta(seconds=int(time.time() - start))
    csv_write(DIR=DIR, l=["Bruteforce", bf])
    csv_write(DIR=DIR, l=["fQ", function_f(dict_mat(Theta, n), bf)])
    csv_write(DIR=DIR, l=["time", convert])
    """
if __name__ == "__main__":
    main()